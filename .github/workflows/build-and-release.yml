name: Build and Release KBD Trainer

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-2022
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Determine Version
      id: version
      shell: pwsh
      run: |
        # Get the latest tag or default to v0.1.0
        $latestTag = git describe --tags --abbrev=0 2>$null
        if (-not $latestTag) {
          $latestTag = "v0.1.0"
          Write-Host "No existing tags found, starting with $latestTag"
        }
        
        # Check if current commit is tagged
        $currentTag = git describe --exact-match --tags HEAD 2>$null
        $isRelease = $false
        
        if ($currentTag) {
          # Current commit has a tag - this is a release
          $version = $currentTag
          $isRelease = $true
          Write-Host "Release build detected: $version"
        } else {
          # Development build - append commit info
          $commitCount = git rev-list --count HEAD
          $shortSha = git rev-parse --short HEAD
          $version = "$latestTag-dev.$commitCount+$shortSha"
          Write-Host "Development build: $version"
        }
        
        # Validate semantic versioning format for releases
        if ($isRelease -and $version -notmatch '^v\d+\.\d+\.\d+(-[a-zA-Z0-9\-\.]+)?(\+[a-zA-Z0-9\-\.]+)?$') {
          Write-Error "Invalid semantic version format: $version"
          Write-Error "Expected format: v1.2.3, v1.2.3-alpha, v1.2.3-beta.1, etc."
          exit 1
        }
        
        # Set outputs
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "is_release=$isRelease" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_ENV
        
        Write-Host "Version: $version"
        Write-Host "Is Release: $isRelease"

    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Install NSIS
      run: |
        choco install nsis -y
        echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH

    - name: Install WiX Toolset v3.14
      run: |
        $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip"
        $wixPath = "$env:RUNNER_TEMP\wix314"
        Invoke-WebRequest -Uri $wixUrl -OutFile "$env:RUNNER_TEMP\wix314.zip"
        Expand-Archive -Path "$env:RUNNER_TEMP\wix314.zip" -DestinationPath $wixPath
        echo "$wixPath" >> $env:GITHUB_PATH

    - name: Configure CMake
      run: |
        # Extract version for CMake (remove 'v' prefix and any pre-release/build metadata)
        $version = "${{ steps.version.outputs.version }}"
        $cleanVersion = $version -replace '^v' -replace '-.*$' -replace '\+.*$'
        Write-Host "Using version for CMake: $cleanVersion"
        
        cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPROJECT_VERSION="$cleanVersion"

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Create ZIP Package
      run: |
        cd build
        cpack -G ZIP

    - name: Create NSIS Installer
      run: |
        cd build
        cpack -G NSIS

    - name: Create WiX MSI Package
      run: |
        cd build
        cpack -G WIX

    - name: List generated packages
      run: |
        cd build
        Get-ChildItem "KBD Trainer-*.zip", "KBD Trainer-*.exe", "KBD Trainer-*.msi" | Format-Table Name, Length

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kbd-trainer-${{ steps.version.outputs.version }}-windows
        path: |
          build/KBD Trainer-*.zip
          build/KBD Trainer-*.exe
          build/KBD Trainer-*.msi
        retention-days: 30

    - name: Generate Changelog
      if: steps.version.outputs.is_release == 'true'
      id: changelog
      shell: pwsh
      run: |
        # Get the previous tag for changelog generation
        $currentTag = "${{ steps.version.outputs.version }}"
        $previousTag = git describe --tags --abbrev=0 "$currentTag^" 2>$null
        
        if (-not $previousTag) {
          $previousTag = git rev-list --max-parents=0 HEAD
          Write-Host "No previous tag found, using initial commit: $previousTag"
        }
        
        Write-Host "Generating changelog from $previousTag to $currentTag"
        
        # Generate changelog using git log
        $changelog = git log --pretty=format:"- %s (%h)" "$previousTag..$currentTag" | Where-Object { $_ -ne "" }
        
        if (-not $changelog) {
          $changelog = @("- Initial release")
        }
        
        $changelogText = $changelog -join "`n"
        
        # Save changelog to file and output
        $changelogText | Out-File -FilePath "CHANGELOG.md" -Encoding UTF8
        
        # Set output (escape newlines for GitHub Actions)
        $escapedChangelog = $changelogText -replace "`n", "%0A" -replace "`r", ""
        echo "changelog=$escapedChangelog" >> $env:GITHUB_OUTPUT
        
        Write-Host "Generated changelog:"
        Write-Host $changelogText

    - name: Create Release (on tag push)
      if: steps.version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: KBD Trainer ${{ steps.version.outputs.version }}
        files: |
          build/KBD Trainer-*.zip
          build/KBD Trainer-*.exe
          build/KBD Trainer-*.msi
        body: |
          ## KBD Trainer ${{ steps.version.outputs.version }}
          
          ### 📦 Installation Options
          
          **Choose the package that best fits your needs:**
          
          #### 🔧 **Windows Installer (NSIS)** - `KBD Trainer-*-win64.exe`
          - **Recommended for most users**
          - Professional installer with setup wizard
          - Creates desktop and Start Menu shortcuts
          - Easy uninstall through Control Panel
          - Size: ~1.8 MB
          
          #### 🏢 **Enterprise MSI Package** - `KBD Trainer-*-win64.msi`
          - **For corporate environments**
          - Group Policy deployment support
          - Silent installation capability
          - Windows Installer technology
          - Size: ~2.5 MB
          
          #### 📁 **Portable ZIP Archive** - `KBD Trainer-*-win64.zip`
          - **For portable/USB installations**
          - No installation required
          - Extract and run anywhere
          - Perfect for testing or temporary use
          - Size: ~2.2 MB
          
          ### 🎮 About KBD Trainer
          
          Korean Backdash training tool for Tekken players. Practice your Korean Backdash timing and improve your movement skills!
          
          ### � Changes in this Release
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### 💻 System Requirements
          
          - Windows 10/11 (64-bit)
          - DirectX compatible graphics
          - Gamepad or keyboard input
          
          ---
          
          *Version ${{ steps.version.outputs.version }} - Built automatically with GitHub Actions*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-alpha') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-info:
    runs-on: ubuntu-latest
    needs: build-windows
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Build Status
      run: |
        echo "✅ Automated build triggered for KBD Trainer"
        echo "📦 Version: ${{ needs.build-windows.outputs.version }}"
        echo "🔨 Building Windows packages: ZIP, NSIS, MSI"
        echo "🚀 Artifacts will be available in the Actions tab"
        echo ""
        if [ "${{ needs.build-windows.outputs.is_release }}" = "true" ]; then
          echo "� Release build detected!"
          echo "📋 GitHub release will be created automatically"
        else
          echo "�🏷️ To create a release, push a semantic version tag:"
          echo "   git tag v1.0.0 && git push --tags"
          echo ""
          echo "📖 Semantic versioning examples:"
          echo "   v1.0.0       - Major release"
          echo "   v1.1.0       - Minor release (new features)"
          echo "   v1.0.1       - Patch release (bug fixes)"
          echo "   v1.0.0-alpha - Pre-release alpha"
          echo "   v1.0.0-beta  - Pre-release beta"
          echo "   v1.0.0-rc.1  - Release candidate"
        fi
